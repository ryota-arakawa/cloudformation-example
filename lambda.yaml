AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'Lambda + Typescript Starter Project'

Globals:
  Function:
    Timeout: 3

# --------------------------------------------- #
# Parameters
# --------------------------------------------- #
Parameters:
  ProjectName:
    Type: String

  DynamoDBEndpoint:
    Type: String
    Description: DynamoDB Endpoint
    # output.yamlはcloudformation実行用のyamlファイル（クラウドにあてる用）のためpublicのpath
    # dynamodbがvpnであれば別スタックで定義してあるvpnのエンドポイントを参照する
    Default: https://dynamodb.ap-northeast-1.amazonaws.com

  Region:
    Type: String
    Description: AWS Deploy Region
    Default: ap-northeast-1

  S3Path:
    Type: String

  CommonResourcesLayerVersion:
    Type: String
    Default: v1.0

  GreetingVersion:
    Type: String
    Default: v1.0

  NotificationsLambdaFunctionVersion:
    Type: String
    Default: v1.0

# --------------------------------------------- #
# Resources
# --------------------------------------------- #
Resources:
  # --------------------------------------------- #
  # Security Group
  # --------------------------------------------- #
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
#      VpcId: !ImportValue ${ProjectName}-vpc-id
      VpcId: { "Fn::ImportValue": { "Fn::Sub": "${ProjectName}-vpc-id" } }
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # --------------------------------------------- #
  # Lambda Layers
  # --------------------------------------------- #
  CommonResourcesLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: commonResourcesLayer
      Description: Common Resource Layer
      ContentUri:
        Bucket: !Ref S3Path
        Key: !Sub CommonResourcesLayer/${CommonResourcesLayerVersion}.zip
      CompatibleRuntimes:
        - nodejs12.x
    Metadata:
      BuildMethod: nodejs12.x

  # --------------------------------------------- #
  # Lambda Functions
  # --------------------------------------------- #
  NotificationsLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri:
        Bucket: !Ref S3Path
        Key: !Sub NotificationsLambdaFunction/${NotificationsLambdaFunctionVersion}.zip
      Runtime: nodejs12.x
      Timeout: 10
      MemorySize: 256
      Handler: appsync.handler
      Environment:
        Variables:
          DYNAMODB_ENDPOINT:
            Ref: DynamoDBEndpoint
          REGION:
            Ref: Region
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          # マルチAZならここを増やす
          - 'Fn::ImportValue': !Sub '${ProjectName}-public-az-a-subnet'
      Role: !GetAtt LambdaRole.Arn

  Greeting:
    Type: AWS::Serverless::Function
    Properties:
      # CodeUriのBucketをParametersの変数にするには予めzip化しておかないといけない
      # なぜかハードコーディング（s3のフルパス）であればzipしないまま（フォルダーごと）s3にあがっていればデプロイができる
      #      CodeUri: s3://example-lambda-1634779516/Greeting/v1.0
      CodeUri:
        Bucket: !Ref S3Path
        Key: !Sub Greeting/${GreetingVersion}.zip
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Environment:
        Variables:
          DYNAMODB_ENDPOINT:
            Ref: DynamoDBEndpoint
          REGION:
            Ref: Region
      Layers:
        - Ref: CommonResourcesLayer
      #      Events:
      #        App:
      #          Type: Api
      #          Properties:
      #            Path: /app/greeting
      #            Method: get
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          # マルチAZならここを増やす
          - 'Fn::ImportValue': !Sub '${ProjectName}-public-az-a-subnet'
      Role: !GetAtt LambdaRole.Arn

  # --------------------------------------------- #
  # Lambda Invoke Permission
  # --------------------------------------------- #
  GreetingInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Greeting.Arn
      Action: 'lambda:InvokeFunction'
      Principal: elasticloadbalancing.amazonaws.com

  # --------------------------------------------- #
  # Lambda Role
  # --------------------------------------------- #
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          # Allow Lambda to assume this role
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: '/'
      Policies:
        - PolicyName: LambdaRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              # Allow Lambda to write logs to CloudWatch
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              # Allow Lambda to read from the DynamoDB stream
              - Effect: Allow
                Action:
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource: "*"
              - Effect: Allow
                Action:
                  - dynamodb:DeleteItem
                  - dynamodb:ListTagsOfResource
                  - dynamodb:DescribeReservedCapacityOfferings
                  - dynamodb:DescribeTable
                  - dynamodb:GetItem
                  - dynamodb:DescribeContinuousBackups
                  - dynamodb:DescribeLimits
                  - dynamodb:BatchGetItem
                  - dynamodb:BatchWriteItem
                  - dynamodb:PutItem
                  - dynamodb:ListBackups
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:DescribeStream
                  - dynamodb:UpdateItem
                  - dynamodb:DescribeTimeToLive
                  - dynamodb:ListStreams
                  - dynamodb:DescribeGlobalTableSettings
                  - dynamodb:ListGlobalTables
                  - dynamodb:GetShardIterator
                  - dynamodb:DescribeGlobalTable
                  - dynamodb:DescribeReservedCapacity
                  - dynamodb:DescribeBackup
                  - dynamodb:GetRecords
                Resource: "*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ReceiveMessage
                Resource: arn:aws:sqs:*

  # --------------------------------------------- #
  # TargetGroup
  # --------------------------------------------- #
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: GreetingInvokePermission
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt Greeting.Arn

# --------------------------------------------- #
# Outputs
# --------------------------------------------- #
Outputs:
  CommonResourcesLayerVersion:
    Value: !Ref CommonResourcesLayerVersion
    Export:
      Name: common-resoure-layer-version
  GreetingVersion:
    Value: !Ref GreetingVersion
    Export:
      Name: greeting-version
  LambdaGreetingArn:
    Value: !GetAtt Greeting.Arn
    Export:
      Name: lambda-greeting-arn
  TargetGroupArn:
    Value: !Ref TargetGroup
    Export:
      Name: !Sub ${ProjectName}-target-group-arn
